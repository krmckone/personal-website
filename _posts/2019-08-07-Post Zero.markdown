---
layout: post
title:  "Leaving Minnesota, back to Iowa City."
date:   2018-08-20 18:21:00 -0500
categories: Personal
---
## I've been in the twin cities area since early January, 2018.

Thinking back to October of 2017 during Fall semester, I can still recall  the classes I was taking and having a decent time at it. Abstract Algebra with Peter Blanchard, Theory of Leisure and Play with Adrienne Johnson, Object Oriented Software with Douglas Jones (he's one of those guys that knows a little bit about everything), and Interpretation of Literature with Ian Faith. That's when I found out I landed a co-op opportunity in software engineering, working for Thomson Reuters in Eagan, Minnesota. I was crazy stoked! I remember how excited I was when I found out that the interviews started working out and I got an offer to work for about seven and a half months, taking the following Spring semester off to do so. It was exactly what I was looking for; I was doing well in classes and I was a junior, so it was time to get an internship under my belt. The prospect of moving away to a new city for a while was really attractive to me. TR's office would be right in the suburbs outside of Minneapolis. The company, from what I had researched, seemed to be a really big with lots of opportunity to get involved in cool stuff behind the scenes in corporate life. And while it certainly is a big company, it turns out this whole moving to the twin cities on my own thing had a lot more riding on it than just getting professional work experience in software.


## January

Moving up was just about as smooth as it gets. I brought two pieces of furniture: my bed and my desk. Everything else fit in my red Chevy Blazer. It was a really tight fit, but I knew I would probably be moving back to Iowa as soon as the internship was through. The less I brought, the easier the trip back would be. In a way, I think I was already looking forward to that return trip back to Iowa. I was missing college, the disciplined schedule of classes and mentoring by scholars. I wasn't sure how I was going to adjust to a pure work schedule. I knew I would probably wake up early still, get to the office as early as I could ahead of everyone else. That sort of thing just made sense to me, and it's probably the only thing that was decided from the beginning by me, in the environment and state of the things in my life as they were, that was fully carried out in its entirety from January to what will be my last day here in Minnesota.

### It was a really cold winter. I learned how to survive snow in the cities

Winters in Iowa have their pros and cons. Rural areas are absolutely gorgeous after a fresh powdering in the morning. Maybe it's just because I grew up with it, but I always found something to like about the winters in small towns in Iowa. Snow and cold in Minnesota is not like it is in Iowa. It gets colder, and the snow stays around a little longer. Now take that and put it in a large urban center, and things get pretty crazy. After a snow storm, pretty much all street parking is a hazard unless you have four wheel drive. You also better wear boots everywhere. This is the standard stuff though that anyone can figure out about living in ol Minnesota for a winter. 

### Working in a large office for the first time as a student is jarring.

In college, it's very easy to get to know people and make friends through classes and clubs. Everyone is young and almost on the same page with the culture of the college; it's easy to get involved and feel like you're really a part of the whole thing. The biggest punch in the face to me came in the first couple of months working. Working for a large enterprise is not particularly satisfying on a daily basis in the same way completing mathematics problems or implementing solutions in your favorite programming language for homework is. And this is even while I give my company as much praise as I can for their culture and what I see them accomplish with it. 

### From January to late March, I learned that the cloud is the future.

While it probably seems like I want to bash hard on what it is I've been tasked with doing at work the past seven months, that's really not the case at the end of the day. What I did learn in my time is all about the grand and fantastic world of Amazon Web Services. Today, I sort of land on a strange border between "not giving a single heck about business/enterprise solutions, just let me investigate cool CS/Math problems" and "wow the public cloud and enterprise solutions through those means are actually pretty neat and will only get bigger from here". On days I couldn't care less for the cloud, I read MIT's Structure and Interpretation of Computer Programs and learned Scheme, a dialect of Lisp, my first functional language. I would never use Lisp or any of its dialects in my day to day work, but I became a stronger Python programmer because of it. This fall, I take a course in F# and I'm glad I took the time to learn a functional language beforehand. On days that I did want to learn the cloud, I really learned it and I dove in face first. I had the opportunity to write two Java micro services leveraging the Spring Boot framework. I learned how to deploy the jars to two separate EC2 instances, implemented a quick and dirty CI/CD pipeline to quickly deploy my changes, wrapped the whole infrastructure in cloudformation written in YAML. There's an application load balancer, target groups, auto scale groups, security groups, IAM roles, launch configurations and user data on the instances; the whole shebang. I used this implementation to demonstrate our new SaSS providers we had just picked up: Sumo Logic and DataDog's application performance monitoring. There's no need to go into those details right now, but it was cool stuff to implement with the help of some seniors, especially as a new intern. 

Trust me when I say this: this stuff is very very cool. Just let the guys who are close to the code and want to understand the code write the code and gush over it. Deployment through clever and robust CI/CD is something to get proud of. Demonstrating cool usage of tools and finding new use cases is awesome. Once you do it, you get to write the documentation on it and be the owner of it and the driver. In this kind of environment, that's really the only way I could get people to start to know my name and realize what exactly it is I do there. I'm super thankful for the opportunities I got to help showcase our cool new SaSS providers in front of our teams using code that I wrote and a framework I had no clue about before I started diving in. Otherwise, I probably would have just put my body next to everyone's desk at some point and interrupt their mojo with my intern antics. This was a really cool experience for me and I think it helped show my team that I wanted to get involved and contribute as much as I could. 

### To me, though, server-less is where it's at.

After this, I got a long run of work writing lots of Python in the really cool and incredibly useful AWS Lambda. Basically, any time you want to automate the activity of hitting some API endpoints, doing some computation or structuring of data returned from those calls to your liking, and shipping that completed work off to somewhere else, Lambda is your tool. Lambda makes it so you don't need to have wasted uptime of servers where you need to do lengthy updates to code when you make changes or make clumsy updates to the execution environment. In a lot of cases, you will need those servers up and you will have to deal with updates and code modifications over time as you expand and needs change. If you have a heavyweight application backend that needs to be up 24/7 and that's your use case, then stick to the EC2s. But Lambda is great for those cases where you want to deploy a script that's going to do some quick work and not be called upon to do anything else in particular. Unlike EC2s, you get charged for only the runtime of the code and the memory usage. Perfect for one-off activities or some script that's just going to take some data and do some mumbo jumbo on it before sending it off to the next stop in the pipeline. This is how you begin to implement an entirely server-less architecture. This is super interesting to me. Lambdas linked together through events like puts to S3, API Gateway events and webhooks, etc. The possibilities to stay lightweight and cheap are very evident here. I wrote a handful of lambdas that did some cool stuff on the APIs exposed by DataDog and Sumo Logic and it was really fun writing and testing this code. I also got to wrap all of them in cloudformation, which is a super fun exercise in developing your infrastructure as code.


### Capital One's Cloud Custodian: An exercise in open source.

Toward the end of my tenure, my team was assigned to be the owners of a tool provided by Capital One, called Cloud Custodian. You can read up on all of the details on their Github, but basically Custodian (c7n) is a cloud fleet management tool. Because the cloud is pay as you go, you don't want to have a massive amount of resources just hanging around without getting used, like EC2s or S3 buckets with outdated and useless objects. You can also use Custodian to implement best practices, like resource tagging and security group rules for your enterprise. Custodian itself is a great idea and is decently implemented. You write 'policies' in YAML and these get read in by Custodian at invocation time. I won't provide any examples here at this point, but it's pretty intuitive and easy to write basic policies. Custodian certainly left some things to be desired however, and some functionality that we were looking for at the time isn't there today. It's a very large tool and the code base is difficult to dive into, even if you're a solid Python programmer. The most fun thing though with Custodian was the last week or so at my internship; me and a senior discovered a bug in the implementation of a particular feature that was 'fixed' with a pull request about 6 months ago. The bug wasn't actually fixed then, and me and my senior did pair programming to write an initial test that failed and then did some refactoring and rewriting of the functionality to fix it. It was a pretty easy fix and the original implementation was unnecessarily dense and unpythonic. I already a moderately unhappy view with how a lot of features of Custodian were implemented, but this was essentially proof to me that the code was becoming poorly maintained over time through open source. On my last few days of work at TR, we were going through our bureaucratic measures to make sure our legal side was clear with contributing back to Custodian with this bug fix. Whether or not the guys at Capital One actually approve our PR is totally up in the air.


### A return to worship and faith; finding a community.

I had grown up in a christian environment and was baptised as a toddler. However, family stuff happens as time goes on and we just happened to end up not going to church anymore. I was never taught the significance of baptism, what it means to study the Bible, and the importance of Sunday worship. When I moved to Minnesota, I was lacking community like I had back in Iowa. I didn't know anybody, besides the people I worked with, and most of them were quite a bit older or had their own means and conventions of keeping themselves busy outside of work. I decided to put myself in a place called Salt Company on the University of Minnesota's campus one Thursday night. I didn't have anything better to do anyway, and it turned out to be an incredible experience. I was baptised this past spring, and met a wide array of different people that each provided me with brand new insight and influence that I've found incredible benefit in. The greatest part of the whole thing though, is that Iowa City has a community church and college ministry connected to the same group I joined in Minneapolis. This Fall, I should already have a solid and prosperous community to join in on.

### Reaching the end of an experience, looking forward along the way

Around late July and early August, reaching the end of my time in Minnesota, things started to get wildly different. My family came up to visit, my mom and her boyfriend attended my last Salt City service with me. There, the pastor told us to try to write a prayer down. And then continuously pray that thing every day or every time you sit down to pray. And see what happens, see if that prayer is granted through requests. So what I picked as this prayer was asking the Lord to aid my transition back to Iowa city and to help me get involved in community down there. But also I asked to help me make an impact, help me make a difference in people. And then, the next week at work, things started happening a little differently. Me and a senior engineer on my team found a bug in Capital One's Cloud Custodian and we decided to do a pair programming session to fix it. When he asked me if I would want to do it in pair programming, I immediately jumped on the opportunity. This was honestly quite strange and somewhat out of character for me at this point, at least that's what I would have thought looking from the outside in. Something was driving me, something different was putting air under my steps. And we fixed that bug fast, it was blazing fast. We tested it and we think we were going to be able to contribute it back. Then Tuesday, another engineer had me review TWO merge requests. Usually this entire time it was the other way around; he would review MY merge requests. but this time he had asked for my opinion two times in one day to review his changes. And it was crazy fun, I left comments and suggestions and it was great. Things were changing and good things were happening that were so noticeable. and full time employees were mentioning that I was leaving soon and wanted to make sure that they stopped by my desk the last day. It was just crazy in principle how things were changing and how I felt like I was making an impact.